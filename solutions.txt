# Part A:

## Recovered password

[('ceccio', '02361267'), ('bjacobsen', '22005597')]

## Pseudocode for attack

found_passwords = []
for password_length in [1, ..., 8]:
    for each password p of length password_length:
        for user, salt in zip(['ceccio', 'bjacobsen'], ['547750', '980166']):
            if hash(user, p, salt) == known hash
                found_passwords.append((user, p))
The second for loop works by setting max_int = '9'*password_length and then 
iterating through all ints less than this value, adding padding of leading
0's if necessary.

## Worst case running time
The outer for loop is repeated 8 times. The next for loop is 10^n since there are
10 digits and each of the n positions in the password can be one of 10 digits. 
The final for loop is just repeated twice since we have 2 users. 

In total, the running time is 2*(10^8 + 10^7 + ... + 10), which is dominated by 
its largest term, 10^8 (aka 10^n), thus, the algorithm is O(10^n). 

## Discussion of current proposal and suggestions for improvement
    1. Stricter password requirements. Including lower case chars + upper case
       extends running time to O(62^n). Symbols make this larger. Requiring 
       longer passwords will increase n and also extend the running time.
    2. Slower hashing algorithms than sha256 will make it more difficult to 
       go through all cases.


# Part B:

## Discussion of the current scheme
    The implementation of the encryption scheme does provide confidentiality
    because an attacker cannot learn what is in the message without the key.
    Even with a chosen plaintext attack, the attacker cannot learn anything 
    because there is a randomly-chosen IV. 
    However, the scheme does not provide integrity (as we showed, an attacker
    can change the message without being detected) and relatedly does not 
    provide authenticity as there is no way to verify who sent the message.
    
    In this specific case the 11th byte of the IV can be modified by 0x08
    inorder to change the digit 1 in 12 to a 9 making it 92. This is because
    the $ number is within the first block which is xored with the IV.

## Suggestions for improving the scheme
    I would look into implementing a MAC so that the message and tag pair
    are created in tandem. This is provided in the Crypto
    api with the verify(mac_tag) function. Or, the scheme could hash the
    key + message together so that the secret key is needed to update the tag.


# Part C:

## Secret code
    5991Edc4-52912b5d

## Explanation
    The Diffie-Hellman protocol has 4 steps:
    1. Agree on p and g publically - this was done for us by choosing what 
       elliptic curve to use
    2. We choose a random secret x and compute g^x mod p. We did this via
       ec.generate_private_key and then used the x.public_key.public_bytes
       variable (this is what copilot suggested -- the documentation doesn't
       explain clearly what public_bytes does but we think it is just 
       formatting x's public key (aka g^x) in the format the server expects)
    3. The other party does the same thing with a random secret y and  
       g^y mod p -- this was done on the server in the API call 
    4. We each compute gxy = g^{xy} and a hash k=H(a). k is used to encrypt the
       message

    So, in the JSON call, the server computes c = k(m), where k is the message.
    They send us g^y and c, and then we compute gxy = g^{xy} using g^y. From 
    there, the existing code calculated k and unhashed the message.

